Problem Description
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Problem Link : https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

Solution:
/*Below Solution is Linear Search Solution*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        
        if(nums.length==1)
        {
            int [] ans = new int[2];
            if(nums[0]==target)
            {
                ans[0]=0;
                ans[1]=0;
            }
            else
            {
                ans[0]=-1;
                ans[1]=-1;
            }
            return ans;
        }
        int [] ans = new int[2];
        int j=0;
        int flag=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==target)
            {
                j=i;
                flag=1;
                break;
            }
        }
        if(flag==1)
        {
            ans[0]=j;
            while(j<nums.length && nums[j]==target)
            {
                j++;
            }
            ans[1]=j-1;
            
        }
        else
        {
            ans[0]=-1;
            ans[1]=-1;
        }
       return ans;
    /********************************************************************************/
    /*Below Solution is using Binary Search*/
//         int start=0;
//         int end=nums.length-1;
        
//         while(start<=end)
//         {
//             int mid=(start+end)/2;
//             if(nums[mid]==target)
//             {
//                 return new int[] {floor(nums,target,mid),ceil(nums,target,mid)};
//             }
//             else if(nums[mid]<target)
//             {
//                 start++;
//             }
//             else
//             {
//                 end--;
//             }
//         }
//         return new int[]{-1,-1};
     }
//     private static int floor(int [] num,int target,int mid)
//     {
//         int i=mid;
//         while(num[i]==target)
//         {
//             i--;
//             if(i==-1)
//                 break;
//         }
//         return i+1;
//     }
//     private static int ceil(int [] num,int target,int mid)
//     {
//         int i=mid;
//         while(num[i]==target)
//         {
//             i++;
//             if(i==num.length)
//                 break;
//         }
//         return i-1;
//     }
 }
